package HashCompete;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * A HashWordSet object represents a set words using a simplified hash table as
 * as the internal data structure. The hash table uses separate chaining
 * (a linked list in each has bucket index) to resolve collision.
 * The hash table has a fixed number of buckets.
 */
public class HashWordSet {
    private final static int BUCKETS = 53;
    private Node[] elementData;
    private int size;
    private int[] keys = new int[]{6637, 50849, 32869, 92791, 5471, 8747, 89381, 46411, 859, 2347, 58031, 31847, 70099, 62969, 29959, 98467, 1979, 67777, 33997, 32009, 18587, 16067, 42979, 55547, 26399, 12391, 23357, 23531, 95539, 25741, 43961, 96269, 68813, 43451, 19463, 16921, 3571, 7187, 34403, 49681, 46049, 43063, 6121, 34819, 15139, 29537, 73643, 19979, 97553, 27691, 44893, 54403, 34981, 28081, 27631, 5273, 62851, 95177, 16787, 41081, 15913, 22157, 76261, 49559, 59243, 25523, 62129, 89753, 89371, 38047, 95947, 56467, 47947, 64067, 92003, 21683, 11299, 95383, 45587, 47279, 95471, 25169, 77023, 19913, 80809, 73709, 2447, 88799, 27457, 93169, 653, 92119, 29207, 62099, 10399, 63799, 11497, 2203, 61559, 72503, 84811, 43651, 3461, 44357, 92479, 81343, 42509, 76387, 65167, 43133, 42197, 8641, 64997, 24917, 17669, 48817, 6301, 55717, 72269, 27751, 27143, 76913, 82997, 79103, 92251, 59219, 39359, 67481, 95071, 99707, 58217, 86183, 35597, 67489, 15727, 39827, 10987, 5801, 50093, 77797, 73571, 86293, 21851, 22727, 25667, 40609, 95101, 919, 9041, 94229, 37357, 52903, 21277, 32119, 72767, 389, 1327, 83257, 45677, 19801, 67453, 40099, 50527, 8863, 8461, 8999, 62053, 63617, 51899, 8581, 67867, 22171, 89899, 95801, 92779, 36599, 40351, 19273, 70981, 69491, 34519, 38977, 36313, 39443, 79133, 66293, 90053, 88079, 60631, 48353, 99439, 16747, 28463, 48409, 65413, 9257, 64937, 97081, 69557, 81233, 25771, 47533, 33113, 63367, 15467, 57503, 19727, 73039, 78553, 1493, 94999, 43093, 49993, 51647, 16319, 41113, 65257, 65071, 11689, 32587, 65519, 983, 50951, 28229, 62171, 75683, 66343, 13729, 2477, 34141, 82507, 38543, 95461, 62483, 12473, 17789, 5309, 83717, 69163, 18793, 97829, 9629, 7727, 36479, 13499, 12011, 49451, 63691, 22637, 36607, 93319, 86711, 18149, 2309, 46687, 43661, 12539, 21059, 58237, 22003, 84713, 98009, 39191, 90793, 35879, 48619, 98837, 24971, 46933, 45659, 57719, 33427, 20771, 78301, 54541, 47501, 24077, 94261, 5443, 32299, 97523, 13859, 85037, 9199, 20357, 81463, 17293, 88661, 21179, 3313, 75479, 17939, 35129, 79903, 39847, 64849, 1259, 68821, 60623, 65419, 7723, 90659, 15629, 97789, 97729, 78649, 4729, 77699, 48479, 81371, 13883, 73291, 18461, 83401, 97003, 41887, 43177, 19501, 66791, 11443, 73823, 37619, 93371, 57467, 14887, 3853, 14683, 1367, 18583, 73651, 4201, 68699, 47093, 15017, 73091, 35141, 78139, 70937, 853, 6359, 38891, 63793, 38749, 24733, 16493, 67261, 2243, 1061, 50723, 90619, 42139, 62591, 68059, 1741, 36791, 66697, 18521, 61949, 37693, 24691, 3229, 59053, 55663, 71741, 10243, 56737, 63059, 80681, 67349, 81203, 78401, 31231, 63841, 67103, 10529, 69833, 52837, 11827, 17627, 88493, 20507, 77933, 70141, 92993, 83557, 28859, 20143, 91309, 70687, 86111, 40093, 17377, 64381, 16063, 80513, 71413, 95257, 7489, 51229, 78233, 53233, 25153, 21611, 84199, 36709, 14389, 85531, 31387, 8329, 66221, 13183, 6421, 34253, 93503, 2797, 21521, 75407, 89083, 36793, 21863, 14401, 20707, 82261, 22129, 13873, 36299, 5519, 18191, 45119, 42169, 19333, 31183, 64499, 44771, 15359, 23971, 88423, 59497, 53189, 67061, 10303, 587, 31477, 12791, 88951, 6143, 40429, 86311, 33563, 33547, 211, 74161, 94513, 35339, 93493, 16091, 69197, 28393, 42373, 32251, 93559, 75161, 16417, 57089, 35027, 4567, 42083, 74149, 15451, 26891, 79393, 67187, 96149, 88607, 84961, 85751, 97841, 21491, 3413, 42307, 4273, 14723, 37441, 64037, 4219, 16487, 36857, 84737, 66161, 50159, 55889, 73849, 72727, 50291, 72901, 47293, 9619, 81769, 44027, 14081, 56543, 24007, 58129, 8887, 9013, 14869, 72911, 1307, 89071, 11351, 59239, 90271, 67447, 96769, 85667, 23753, 64301, 28619, 39043, 80909, 47837, 94201, 3467, 31769, 77747, 10193, 50773, 45541, 45341, 76949, 70373, 59951, 42859, 47797, 76031, 89597, 92671, 14717, 4093, 25031, 49823, 76289, 75689, 8821, 57139, 73771, 35281, 33493, 76369, 26347, 20023, 93871, 56843, 31391, 88337, 11959, 28099, 68219, 41953, 21379, 93481, 37, 57349, 67933, 26321, 68227, 10271, 85669, 59419, 98729, 74719, 58511, 75169, 12547, 90703, 64633, 37783, 83933, 13829, 43943, 18143, 63443, 44273, 95707, 78101, 6949, 70157, 98479, 88471, 42967, 54311, 37633, 863, 8753, 51197, 73517, 44281, 55787, 5477, 37649, 4253, 41117, 54679, 92569, 51109, 68443, 26297, 86851, 59929, 19813, 99767, 31189, 32839, 97241, 1987, 71387, 39107, 7541, 25679, 1051, 57077, 84239, 13121, 6173, 43777, 44507, 98429, 21031, 98179, 82073, 52999, 68927, 17807, 65929, 12553, 41203, 65851, 10321, 5807, 95717, 96931, 40591, 29573, 44131, 1667, 16981, 69263, 18289, 90547, 5981, 69001, 35381, 57787, 92503, 61001, 91811, 41981, 95401, 61543, 62131, 59887, 39709, 99563, 58337, 12289, 59699, 80897, 19753, 13327, 30013, 4241, 5867, 38011, 25799, 2657, 42409, 9371, 15731, 72101, 54091, 1997, 86959, 79987, 15907, 40177, 54617, 86837, 59357, 86369, 50777, 18439, 94823, 2357, 66467, 97861, 87671, 80989, 68113, 47843, 27449, 70501, 37967, 62141, 84179, 38371, 93763, 37199, 33577, 55807, 62983, 67421, 72367, 55609, 62897, 9227, 90911, 1543, 80141, 71171, 39989, 7411, 92203, 58171, 45697, 57107, 17957, 80599, 72073, 16883, 33203, 96281, 71971, 8117, 99397, 60953, 49171, 65657, 23549, 85201, 82463, 8237, 4283, 39079, 39499, 52051, 6379, 99083, 15217, 4871, 69191, 73757, 67399, 65497, 75721, 62861, 58693, 4423, 39157, 21569, 45389, 56477, 51061, 49177, 88789, 65293, 19507, 77543, 28979, 62627, 20249, 67961, 86399, 9787, 94583, 53759, 88007, 89653, 62477, 36563, 85639, 21377, 10651, 33331, 79231, 68447, 46703, 74759, 98207, 52543, 19681, 64217, 75277, 89567, 19717, 32831, 97007, 43867, 71069, 15377, 29599, 76207, 33797, 27583, 72577, 7573, 12119, 887, 66601, 59119, 45053, 97571, 14939, 55343, 62827, 64891, 11251, 7351, 12757, 19081, 73523, 99131, 84131, 50957, 9817, 16127, 29741, 89399, 45763, 96353, 86291, 55621, 7841, 59567, 84053, 33301, 42499, 72893, 24781, 87427, 36587, 33871, 72493, 69203, 39229, 3221, 1637, 10099, 31643, 78737, 25717, 90523, 30631, 87973, 65119, 17383, 43151, 97187, 15401, 10477, 22291, 80167, 82483, 8467, 79, 35111, 6863, 48397, 19661, 40289, 81199, 77929, 94561, 31177, 23827, 33829, 66571, 49391, 48647, 5153, 99347, 42467, 4337, 28573, 8779, 75289, 35951, 29531, 13093, 92593, 9923, 54409, 3119, 36527, 98963, 56237, 21587, 91781, 82727, 77647, 50753, 52883, 31859, 35537, 15739, 20693, 98779, 32213, 57679, 78797, 78721, 92809, 62017, 2503, 10753, 4091, 65617, 6551, 36343, 19141, 70039, 71011, 23027, 29347, 85193, 48871, 53093, 84401, 36389, 76511, 85711, 51949, 62137, 65539, 68161, 49139, 60901, 10331, 22769, 54469, 3889, 55799, 47699, 88667, 14549, 70957, 51383, 38083, 72481, 52433, 56929, 307, 17299, 26539, 48947, 31891, 78893, 43891, 74287, 33149, 54413, 98563, 93601, 86297, 82051, 57427, 66449, 32443, 7963, 90017, 79943, 12889, 37087, 65633, 26627, 21001, 61007, 97159, 44983, 7121, 8609, 68749, 93179, 72211, 23677, 53887, 82279, 56311, 15797, 34159, 27851, 21937, 17159, 54001, 56569, 82193, 46307, 78277, 74797, 19961, 28559};
    private int key;
    private int average = 0;
    
    /**
     * Normalizes the given word by eliminating special characters from
     * its beginning and ending. 
     * @param word - word to be normalized.
     * @return the normalized version of the word.
     */
    private static String normalize(String word) {
        String specialChars = " ~!@#$%^&*()_+`-={}[]|\\:\";'<>?,./â€œâ€�â„¢";
        int i = 0;
        while (i < word.length() && specialChars.indexOf(""+word.charAt(i)) != -1) {
            i++;
        }
        int j = word.length()-1;
        while(j > i && specialChars.indexOf(""+word.charAt(j)) != -1) {
            j--;
        }
        return word.substring(i, j+1).toUpperCase();
    }
    
    /**
     * Determines if the given word exists in the hash
     * @param word - word to be tested.
     * @return true if the word is present in the hash, false otherwise.
     */
    private boolean contains(String word) {
        int h = hash(word);
        Node current = elementData[h];
        while (current != null) {
            if (current.word.equals(word)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }
    
    /**
     * Constructs a new HashWordSet.
     */
    public HashWordSet() {
        elementData = (Node[]) new HashWordSet.Node[BUCKETS];
        size = 0;

    }

    public HashWordSet(int i) {
        elementData = (Node[]) new HashWordSet.Node[BUCKETS];
        size = 0;
        key = keys[i];
    }
    
    /**
     * Adds the given word, in normalized form, to the HashWordSet.
     * @param word - word to be added to the hash.
     */
    public void add(String word) {
        String normWord = normalize(word);
        if (!contains(normWord)) {
            int h = hash(normWord);
            Node newNode = new Node(normWord);
            newNode.next = elementData[h];
            elementData[h] = newNode;
            size++;
        }
    }
    
    /**
     * Generates a textual representation of the hash containing:
     * - the total number of words in the hash,
     * - the minLength, avgLength and maxLength of the buckets,
     * - the efficiencyFactor as the sum((bucketLength - avgLength)^2 / BUCKETS)
     * @return a string with the textual representation of the hash.
     */
    public String getTelemtry(){
        int minLength = Integer.MAX_VALUE;
        int avgLength = size/BUCKETS;
        int maxLength = -1;
        double efficiencyFactor = -1;
        
        // TODO: calculate the minLength, avgLength and maxLength of the linked lists in the buckets
        // TODO: calculate the efficiencyFactor as the sum (bucketLength - avgLength)^2 / BUCKETS
        // TODO: constructs the resulting string containing all the calculated values.
        int temp = 0;
        for(int i = 0; i < elementData.length; i++){
            temp = 0;
            Node node = elementData[i];
            while(node != null){
                temp++;
                node = node.next;
            }
            maxLength =  Math.max(temp, maxLength);
            minLength = Math.min(temp,minLength);
            efficiencyFactor += Math.pow(temp - avgLength,2);
            
        }
        return "Efficieny Factor: " + efficiencyFactor / BUCKETS + "\nKey: " + key + "\n";
    }

    public String toString(){
        
        int minLength = Integer.MAX_VALUE;
        int avgLength = size/BUCKETS;
        int maxLength = -1;
        double efficiencyFactor = -1;
        
        // TODO: calculate the minLength, avgLength and maxLength of the linked lists in the buckets
        // TODO: calculate the efficiencyFactor as the sum (bucketLength - avgLength)^2 / BUCKETS
        // TODO: constructs the resulting string containing all the calculated values.
        int temp = 0;
        for(int i = 0; i < elementData.length; i++){
            temp = 0;
            Node node = elementData[i];
            while(node != null){
                if(i == 0){
                    System.out.println(node.word);
                }
                temp++;
                node = node.next;
            }
            System.out.println(i + " Bucket: " + temp);
            maxLength =  Math.max(temp, maxLength);
            minLength = Math.min(temp,minLength);
            efficiencyFactor += Math.pow(temp - avgLength,2);
            
        }
            // TODO Auto-generated catch block

        


        efficiencyFactor = efficiencyFactor / BUCKETS;
       
        String output = "size = " + size + "\n";
        output += "minLength = " + minLength + "\n";
        output += "averageLength = " + avgLength + "\n";
        output += "MaxLength = " + maxLength + "\n";
        output += "efficiencyFactor = " + efficiencyFactor + "\n";
        output += "average value = " + average/size;
        return output;
    }
    
    /**
     * Hash function determining the hash bucket where the given word
     * is to be placed. The hash function needs to be deterministic
     * (for same word it returns the same value at all times) and has
     * a distribution across buckets as even as possible. 
     * @param word - the word for which the hash value is calculated.
     * @return the hash value, as a number in the range [0, 52]
     */
    private int hash(String word) {
         int[] primes1 = new int[]{264289, 457333, 6959, 423061, 500677, 702557, 830017, 263591, 286753, 963223, 513529, 182387, 109139, 9497, 929293, 901819, 673117, 433421, 949643, 457213, 474127, 713981, 81847, 453217, 98939, 945767, 153997, 397729, 26399, 10103, 503927, 437083, 848143, 138373, 378467, 675593, 302971, 571339, 514379, 586849, 220147, 245561, 949889, 327923, 14341, 799741, 889921, 864037, 605573, 713533, 687721, 866293, 837047, 461009, 68897, 232907, 861361, 613967, 928079, 269749, 105107, 404419, 16111, 607667, 293473, 552583, 754333, 159899, 208889, 244859, 184631, 197101, 156823, 327163, 793553, 444739, 437629, 460673, 983243, 227951, 650017, 581599, 464879, 942637, 952709, 944729, 580813, 195127, 806203, 686891, 626317, 657439, 800089, 493621, 160357, 508363, 257993, 856153, 462983, 921643, 150169, 107699, 970969, 125303, 315937, 858503, 626621, 994183, 198971, 459113, 431, 948007, 943769, 881141, 216617, 120661, 635821, 296507, 942049, 325627, 530947, 600959, 13691, 18289, 926353, 18787, 646339, 249017, 98009, 631249, 851131, 372269, 580487, 594931, 399137, 185993, 824029, 626783, 197921, 207191, 30169, 22963, 734233, 315527, 803963, 497279, 491059, 143629, 566047, 39217, 135101, 517831, 994853, 131947, 928231, 489539, 596251, 194263, 174457, 289243, 784661, 39679, 632623, 26489, 282917, 868177, 850637, 575249, 272203, 986053, 12203, 433079, 560081, 462041, 682361, 29531, 398539, 65579, 950953, 601423, 728771, 473377, 876971, 690541, 192307, 307609, 720211, 507109, 532783, 53623, 390889, 679051, 319477, 89519, 939613, 693437, 170579, 509867, 919223, 100411, 179603, 460403, 895933, 212029, 76537, 177383, 843461, 576469, 133319, 260629, 261463, 419921, 660047, 782149, 956633, 438287, 274709, 837367, 389659, 545087, 532199, 349241, 580639, 581143, 547037, 797647, 534199, 707831, 94583, 270271, 759709, 328813, 928643, 815653, 873989, 255613, 734473, 90187, 183713, 693397, 534203, 128477, 433513, 172283, 295271, 638567, 629113, 212827, 67391, 286171, 457099, 74203, 415717, 861977, 229819, 721163, 45491, 90437, 170369, 835453, 570131, 246439, 133069, 367181, 771739, 676859, 73019, 558197, 517919, 439753, 422789, 607961, 132947, 720913, 333331, 221717, 648019, 933643, 351259, 124799, 105691, 694069, 875141, 228509, 787537, 494407, 174569, 663997, 263071, 552971, 130211, 812213, 75037, 350447, 875519, 285559, 319049, 266083, 877109, 620441, 15217, 413597, 777661, 569581, 132751, 878573, 690119, 842879, 88169, 383951, 588293, 249131, 848779, 811709, 557093, 92737, 771209, 909107, 842759, 957413, 33827, 408677, 843137, 847423, 172439, 401551, 132233, 377459, 758099, 443759, 518747, 219649, 803443, 896449, 134333, 368273, 89137, 161059, 9173, 237571, 715859, 312943, 657047, 411479, 110681, 724627, 532867, 394861, 814501, 401711, 77773, 283159, 840149, 338231, 994039, 22397, 671201, 822781, 105967, 522061, 628301, 441121, 935059, 467417, 716827, 76147, 960493, 169111, 610993, 816929, 934723, 855739, 309277, 453737, 892027, 935653, 290839, 914213, 987293, 599, 697181, 272351, 35449, 886471, 270961, 750803, 456613, 332441, 271003, 249647, 895127, 316439, 763583, 466441, 289717, 44789, 438467, 152959, 512573, 986989, 768371, 95857, 563501, 615313, 673801, 82351, 91951, 482437, 409753, 947407, 220151, 286619, 996253, 204679, 427001, 96589, 158261, 11497, 92809, 881471, 615907, 53267, 829121, 178441, 656707, 46471, 974137, 637573, 753793, 235537, 954391, 633667, 580663, 48779, 178831, 140557, 32887, 352819, 667867, 96263, 852437, 460657, 554959, 301459, 617339, 133541, 148693, 955457, 892553, 765587, 94207, 414653, 545899, 967739, 575747, 979291, 596059, 313981, 363491, 525137, 338321, 32089, 982687, 937639, 49391, 671369, 617129, 187573, 278329, 475613, 70823, 884491, 792731, 633001, 718973, 479783, 115337, 850417, 447331, 939167, 637771, 739751, 180497, 798937, 546179, 927287, 918581, 588113, 29581, 179479, 793843, 483407, 783557, 696263, 242101, 110237, 47591, 939091, 134699, 906427, 493201, 870497, 627479, 358373, 475093, 58049, 587551, 127157, 704567, 286477, 860413, 121843, 947411, 607813, 41023, 297133, 206183, 949951, 6983, 126547, 82007, 175673, 868039, 459763, 37483, 228853, 858217, 268883, 724903, 391487, 70297, 320329, 475763, 8011, 292319, 535151, 718343, 112207, 23599, 436819, 629807, 395047, 870241, 873913, 27271, 527981, 808553, 636301, 430357, 541993, 699157, 429223, 284803, 708329, 921079, 35227, 777977, 359641, 18121, 32363, 687931, 725447, 614413, 869299, 302767, 322109, 482519, 52967, 23857, 617963, 647357, 115693, 191173, 222787, 91583, 177883, 160697, 987457, 810697, 459469, 147211, 812849, 749209, 77647, 518933, 457871, 605641, 711017, 8783, 444953, 263009, 268049, 643453, 697387, 837379, 263401, 9419, 491789, 866309, 294431, 879283, 943729, 177427, 523177, 110183, 559219, 193811, 327619, 91163, 522749, 909767, 698311, 145349, 278917, 148411, 401173, 244493, 148073, 538931, 601687, 847601, 406649, 682327, 108541, 16433, 750719, 786433, 60953, 306893, 736159, 843841, 293729, 500111, 459923, 564353, 129763, 745873, 563777, 635731, 585619, 191669, 192347, 866057, 447053, 784309, 450029, 862919, 511417, 676219, 806581, 171799, 333383, 405253, 565049, 189523, 454277, 138511, 771019, 131759, 880069, 633067, 635317, 811697, 816559, 496997, 328277, 651793, 505481, 417997, 759181, 384611, 625087, 991327, 656587, 258803, 876137, 777641, 188791, 529751, 276671, 474143, 200797, 246941, 774931, 680707, 975691, 746509, 518779, 912839, 212099, 547501, 249143, 906473, 465007, 600319, 958063, 490463, 149749, 601801, 581983, 977819, 576001, 715087, 827537, 999599, 219829, 682739, 428137, 338309, 199357, 330823, 162011, 896617, 82483, 928799, 428047, 747563, 203341, 815261, 53923, 203117, 315067, 173867, 736381, 8641, 478861, 590833, 521999, 540703, 138869, 560639, 920467, 480317, 974891, 247439, 930011, 810091, 379033, 644029, 761531, 568153, 200017, 739861, 855059, 282907, 923171, 874729, 414779, 336703, 431251, 984119, 720133, 732331, 345431, 122741, 642973, 222883, 40507, 781567, 865577, 715681, 885727, 363401, 561199, 371341, 589409, 468887, 858691, 668051, 444029, 106357, 106751, 674789, 763859, 45569, 668347, 920021, 25793, 443791, 908623, 576211, 654821, 832957, 719197, 887759, 416693, 587891, 990799, 535391, 96931, 75377, 646991, 152639, 634441, 880939, 79903, 364883, 795517, 573299, 70981, 923977, 715339, 274177, 856649, 504937, 549091, 801079, 594521, 959219, 695719, 789709, 413579, 609821, 822113, 686837, 665501, 282287, 894407, 641167, 543379, 990523, 354539, 469939, 780697, 159787, 223999, 876329, 468841, 104087, 511487, 250619, 727799, 795253, 313949, 125737, 144407, 5417, 974879, 907199, 453209, 971027, 1429, 168323, 675313, 997309, 748183, 508693, 294053, 417251, 588383, 587459, 588947, 937633, 377521, 78787, 993451, 998947, 609179, 227231, 87797, 877313, 301747, 500791, 774223, 84127, 658319, 314599, 523793, 328109, 302779, 99689, 915737, 800573, 542483, 925733, 276821, 923227, 762877, 162209, 464419, 188437, 839413, 328721, 988417, 296929, 98663, 664459, 431423, 31513, 683143, 257, 806051, 419827, 509147, 385639, 609373, 851569, 772663, 207967, 346013, 608431, 352637, 641327, 901207, 496963, 270229, 492227, 539153, 955951, 860381, 894973, 179951, 356387, 380201, 333269, 564323, 731999, 643873, 776921, 740023, 712301, 690467, 885239, 139439, 565921, 873767, 973669, 557021, 365461, 375523, 548953, 440269, 593899, 593051, 447617, 230743, 804077, 483643, 704863, 314693, 996617, 667687, 273131, 80387, 218047, 35851, 493853, 272141, 385739, 993247, 74017, 839227, 841147, 328633, 835139, 919519, 380267, 964517, 131771, 969637, 425603, 548099, 841979, 722257, 179821, 525583, 824801, 160201, 717697, 413071, 944689, 132623, 150097, 6703, 858397, 178907, 132299, 63197, 687551, 402751, 981311, 712021, 789367, 427447, 592393, 966619, 374359, 656113, 752483, 318403, 95989, 705389, 395719, 331769, 848611, 866119, 449437, 948401, 807787, 788399};
        int[] primes2 = new int[]{211441,
            97813,
            247829,
            670727,
            521299,
            679639,
            512101,
            221729,
            683863,
            276821,
            232391,
            624401,
            105167,
            998983,
            791017,
            604837,
            668347, //this one here is solid
            902599,
            9187,
            715243,
            584167,
            696373,
            559201,
            218513,
            891929,
            557729,
            673117}; //this one is also good 132
        char[] chars = word.toCharArray();
        int output = 0;
        for(int i = 0; i < chars.length; i++){
            //if((int)chars[i] >= 65 && (int)chars[i] <= 90){
                output += (Math.abs((int) chars[i])) * Math.pow(2, i+1);
            //}
        }
      if(word.length() < 5){
          switch (output % BUCKETS) {
              case 0:
                  return 50;
              case 18:
                  return 28;
              case 16:
                 return 32;
              case 43:
                  return 32;
               case 11:
                  return 4;
              case 32:
                  return 41;
              case 25:
                  return 36;
              case 33:
                return 28;
              case 15:
                  return 7;
              case 29:
                 return 34;
              default:
                  break;
          }
          }
        //average += output;
        return Math.abs(output  % BUCKETS);
    }
    /**
     * A Node object contains an individual word and its link 
     * to the next node, if one exist, in its hash bucket.
     */
    private class Node {
        public String word;
        public Node next;

        public Node(String word) {
            this.word = word;
        }
    }
}